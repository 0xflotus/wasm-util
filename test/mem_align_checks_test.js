"use strict";
require('source-map-support').install()

const assert = require('assert')
const ast = require('../build/ast.js')
const {i32,i64,f32,f64,align64,align32,align16,align8} = ast.c

assert( ! i32.addrIsAligned(align64, 0), '[i32] align 64, offs 0, addr 0')
assert(   i32.addrIsAligned(align32, 0), '[i32] align 32, offs 0, addr 0')
assert(   i32.addrIsAligned(align16, 0), '[i32] align 16, offs 0, addr 0')
assert(   i32.addrIsAligned(align8,  0), '[i32] align 8,  offs 0, addr 0')
assert( ! i32.addrIsAligned(align32, 1), '[i32] align 32, offs 0, addr 1')
assert( ! i32.addrIsAligned(align16, 1), '[i32] align 16, offs 0, addr 1')
assert(   i32.addrIsAligned(align8,  1), '[i32] align 8,  offs 0, addr 1')
assert( ! i32.addrIsAligned(align32, 2), '[i32] align 32, offs 0, addr 2')
assert(   i32.addrIsAligned(align16, 2), '[i32] align 16, offs 0, addr 2')
assert(   i32.addrIsAligned(align8,  2), '[i32] align 8,  offs 0, addr 2')
assert(   i32.addrIsAligned(align32, 4), '[i32] align 32, offs 0, addr 4')
assert(   i32.addrIsAligned(align16, 4), '[i32] align 16, offs 0, addr 4')
assert(   i32.addrIsAligned(align8,  4), '[i32] align 8,  offs 0, addr 4')
assert(   i32.addrIsAligned(align32, 8), '[i32] align 32, offs 0, addr 8')
assert(   i32.addrIsAligned(align16, 8), '[i32] align 16, offs 0, addr 8')
assert(   i32.addrIsAligned(align8,  8), '[i32] align 8,  offs 0, addr 8')

assert(   i64.addrIsAligned(align64, 0), '[i64] align 64, offs 0, addr 0')
assert(   i64.addrIsAligned(align32, 0), '[i64] align 32, offs 0, addr 0')
assert(   i64.addrIsAligned(align16, 0), '[i64] align 16, offs 0, addr 0')
assert(   i64.addrIsAligned(align8,  0), '[i64] align 8,  offs 0, addr 0')
assert( ! i64.addrIsAligned(align64, 1), '[i64] align 64, offs 0, addr 1')
assert( ! i64.addrIsAligned(align32, 1), '[i64] align 32, offs 0, addr 1')
assert( ! i64.addrIsAligned(align16, 1), '[i64] align 16, offs 0, addr 1')
assert(   i64.addrIsAligned(align8,  1), '[i64] align 8,  offs 0, addr 1')
assert( ! i64.addrIsAligned(align64, 2), '[i64] align 64, offs 0, addr 2')
assert( ! i64.addrIsAligned(align32, 2), '[i64] align 32, offs 0, addr 2')
assert(   i64.addrIsAligned(align16, 2), '[i64] align 16, offs 0, addr 2')
assert(   i64.addrIsAligned(align8,  2), '[i64] align 8,  offs 0, addr 2')
assert( ! i64.addrIsAligned(align64, 4), '[i64] align 64, offs 0, addr 4')
assert(   i64.addrIsAligned(align32, 4), '[i64] align 32, offs 0, addr 4')
assert(   i64.addrIsAligned(align16, 4), '[i64] align 16, offs 0, addr 4')
assert(   i64.addrIsAligned(align8,  4), '[i64] align 8,  offs 0, addr 4')
assert(   i64.addrIsAligned(align64, 8), '[i64] align 64, offs 0, addr 8')
assert(   i64.addrIsAligned(align32, 8), '[i64] align 32, offs 0, addr 8')
assert(   i64.addrIsAligned(align16, 8), '[i64] align 16, offs 0, addr 8')
assert(   i64.addrIsAligned(align8,  8), '[i64] align 8,  offs 0, addr 8')

assert( ! f32.addrIsAligned(align64, 0), '[f32] align 64, offs 0, addr 0')
assert(   f32.addrIsAligned(align32, 0), '[f32] align 32, offs 0, addr 0')
assert(   f32.addrIsAligned(align16, 0), '[f32] align 16, offs 0, addr 0')
assert(   f32.addrIsAligned(align8,  0), '[f32] align 8,  offs 0, addr 0')
assert( ! f32.addrIsAligned(align32, 1), '[f32] align 32, offs 0, addr 1')
assert( ! f32.addrIsAligned(align16, 1), '[f32] align 16, offs 0, addr 1')
assert(   f32.addrIsAligned(align8,  1), '[f32] align 8,  offs 0, addr 1')
assert( ! f32.addrIsAligned(align32, 2), '[f32] align 32, offs 0, addr 2')
assert(   f32.addrIsAligned(align16, 2), '[f32] align 16, offs 0, addr 2')
assert(   f32.addrIsAligned(align8,  2), '[f32] align 8,  offs 0, addr 2')
assert(   f32.addrIsAligned(align32, 4), '[f32] align 32, offs 0, addr 4')
assert(   f32.addrIsAligned(align16, 4), '[f32] align 16, offs 0, addr 4')
assert(   f32.addrIsAligned(align8,  4), '[f32] align 8,  offs 0, addr 4')
assert(   f32.addrIsAligned(align32, 8), '[f32] align 32, offs 0, addr 8')
assert(   f32.addrIsAligned(align16, 8), '[f32] align 16, offs 0, addr 8')
assert(   f32.addrIsAligned(align8,  8), '[f32] align 8,  offs 0, addr 8')

assert(   f64.addrIsAligned(align64, 0), '[f64] align 64, offs 0, addr 0')
assert(   f64.addrIsAligned(align32, 0), '[f64] align 32, offs 0, addr 0')
assert(   f64.addrIsAligned(align16, 0), '[f64] align 16, offs 0, addr 0')
assert(   f64.addrIsAligned(align8,  0), '[f64] align 8,  offs 0, addr 0')
assert( ! f64.addrIsAligned(align64, 1), '[f64] align 64, offs 0, addr 1')
assert( ! f64.addrIsAligned(align32, 1), '[f64] align 32, offs 0, addr 1')
assert( ! f64.addrIsAligned(align16, 1), '[f64] align 16, offs 0, addr 1')
assert(   f64.addrIsAligned(align8,  1), '[f64] align 8,  offs 0, addr 1')
assert( ! f64.addrIsAligned(align64, 2), '[f64] align 64, offs 0, addr 2')
assert( ! f64.addrIsAligned(align32, 2), '[f64] align 32, offs 0, addr 2')
assert(   f64.addrIsAligned(align16, 2), '[f64] align 16, offs 0, addr 2')
assert(   f64.addrIsAligned(align8,  2), '[f64] align 8,  offs 0, addr 2')
assert( ! f64.addrIsAligned(align64, 4), '[f64] align 64, offs 0, addr 4')
assert(   f64.addrIsAligned(align32, 4), '[f64] align 32, offs 0, addr 4')
assert(   f64.addrIsAligned(align16, 4), '[f64] align 16, offs 0, addr 4')
assert(   f64.addrIsAligned(align8,  4), '[f64] align 8,  offs 0, addr 4')
assert(   f64.addrIsAligned(align64, 8), '[f64] align 64, offs 0, addr 8')
assert(   f64.addrIsAligned(align32, 8), '[f64] align 32, offs 0, addr 8')
assert(   f64.addrIsAligned(align16, 8), '[f64] align 16, offs 0, addr 8')
assert(   f64.addrIsAligned(align8,  8), '[f64] align 8,  offs 0, addr 8')
